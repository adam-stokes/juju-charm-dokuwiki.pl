#!/usr/bin/env perl

use charm;

### Grabbing app_path...
my $app_path = run 'config-get app_path';
### ensure: $app_path

desc "Install stable release of dokuwiki";
task "install_stable", sub {
    ### Make sure we downloaded dokuwiki stable...
    download "http://download.dokuwiki.org/src/dokuwiki/dokuwiki-stable.tgz", "/tmp/dokuwiki.tgz";
    ### require: path('/tmp/dokuwiki.tgz')->exists

    ### Verify the file checksum match whats in our config...
    my $config_checksum   = run 'config-get checksum';
    my $download_checksum = md5 '/tmp/dokuwiki.tgz';
    ### ensure: $download_checksum

    # Want want to pass if the latest stable download matches the existing checksum
    if ($config_checksum eq $download_checksum) {
        run "status-set active The latest stable release is already installed, not upgrading.";
        run "status-set active Ready.";
        exit 0;
    }
    run_task "set_app_version";
};

desc "Install development release of dokuwiki";
task "install_development", sub {
    ### Make sure we downloaded dokuwiki development...
    download "http://github.com/splitbrain/dokuwiki/tarball/master", "/tmp/dokuwiki.tgz";
    ### require: path('/tmp/dokuwiki.tgz')->exists

    ### Updating the checksum in our config...
    my $download_checksum = md5 '/tmp/dokuwiki.tgz';
    run "config-set checksum=$download_checksum";

    ### Verify updating checksum config...
    my $config_checksum = run 'config-get checksum';
    ### require: $config_checksum eq $download_checksum

    run_task "set_app_version";
};

desc "Set application version";
task "set_app_version", sub {
    ### Setting new app_version...
    $app_version = cat "$app_path/VERSION";
    chomp($app_version);

    run "application-version-set $app_version";
};

run "status-set maintenance Configuring dokuwiki";

### Grabbing hook_path...
my $hook_path = $ENV{JUJU_CHARM_DIR};
### require: path($hook_path)->exists

### Ensure config variables are set
my $admin_user = run 'config-get admin_user';
### got: $admin_user
### ensure: $admin_user eq 'admin'

my $admin_password = run 'config-get admin_password';
### got: $admin_password
### ensure: $admin_password

my $admin_name = run 'config-get admin_name';
### got: $admin_name
### ensure: $admin_name

my $admin_email = run 'config-get admin_email';
### got: $admin_email
### ensure: $admin_email

my $content = template(
    "$hook_path/templates/users.auth.php",
    admin_user     => $admin_user,
    admin_password => $admin_password,
    admin_name     => $admin_name,
    admin_email    => $admin_email
);
file "$app_path/conf/users.auth.php", content => $content;

### Grabbing public address...
my $public_address = run 'unit-get public-address';
### ensure: $public_address

$content = template(
    "$hook_path/templates/vhost.conf",
    public_address => $public_address,
    app_path       => $app_path
);
file "/etc/nginx/sites-enabled/default", content => $content;

### Set www-data as the owner of $app_path...
chown "www-data", "$app_path", recursive => 1;

### stopping services
run './hooks/stop';

### starting services
run './hooks/start';

### NGINX should be configured and running now...
run 'status-set active NGINX configured';

### Dokuwiki should be ready...
run 'status-set active Ready';
